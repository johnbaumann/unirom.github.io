{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Unirom Home Bootdisc, Firmware, Shell for PSX Custom Xplorer, Action replay and cheat cart firmware, bootdisc, import player, region switcher, FreePSXBoot installer, Memcard manager, kernel resident debugger... At a glance: You can boot Unirom from disc, a memory card, or a cheat cartridge. Typically: You burn the bootdisc and launch Unirom from it. Unirom can then install itsself to memory card or cheat cart. You can now boot from memory card or cheat cart instead if you want. Installing to a cheat cart lets you boot in about a second, and dual boot Caetla. Installing to a memory card + FreePSXBoot allows you to use models with no parallel port: PSOne, SCPH9000, etc. How do I install it? Installing from CD I'm having problems! Troubleshooting For PC-side serial upload/dumping/TTY/debugging see NOTPSXSerial (aka \"nops\"). Features / Help Topics: Mod-free booting PAL/NTSC region override File Browser File Browser ROM Flashing Installing to Memory Card (via FreePSXBoot) Restoring original EEPROMS PC-Side serial tools Hex Editor Hidden Button Combos Troubleshooting Help, it's not booting my game! My game is super jerky! My laser is kinda noisy, doesn't sound healthy! Make sure you grab a good redump copy of the disc (not some crappy ECM'd rip from a random site) Try another burner (some discs prefer some burners) Burn it at low speed Use good quality discs. \"Verbatim\" is generally good. Try on another machine Is the disc clean? But like... did you really check? Still not booting! Okay, at a minimum I need to know: How are you booting the machine (cheat cart, boot CD, freePSXBoot etc) What model is the machine? What game? What region is the game from? What burner did you use? Is the disc clean? What brand of disc did you use? Does your PC read the disc? Is the machine modded? Is the laser making any noises? Don't forget the info above! Thanks Big thanks to Nicolas Noble for putting together this mkdocs template + build scripts! Developers If you're interested in PSX development in general, drop by the psx.dev discord at http://PSX.dev","title":"Unirom Home"},{"location":"#unirom-home","text":"","title":"Unirom Home"},{"location":"#bootdisc-firmware-shell-for-psx","text":"Custom Xplorer, Action replay and cheat cart firmware, bootdisc, import player, region switcher, FreePSXBoot installer, Memcard manager, kernel resident debugger...","title":"Bootdisc, Firmware, Shell for PSX"},{"location":"#at-a-glance","text":"You can boot Unirom from disc, a memory card, or a cheat cartridge. Typically: You burn the bootdisc and launch Unirom from it. Unirom can then install itsself to memory card or cheat cart. You can now boot from memory card or cheat cart instead if you want. Installing to a cheat cart lets you boot in about a second, and dual boot Caetla. Installing to a memory card + FreePSXBoot allows you to use models with no parallel port: PSOne, SCPH9000, etc. How do I install it? Installing from CD","title":"At a glance:"},{"location":"#_1","text":"I'm having problems! Troubleshooting For PC-side serial upload/dumping/TTY/debugging see NOTPSXSerial (aka \"nops\").","title":""},{"location":"#features-help-topics","text":"Mod-free booting PAL/NTSC region override File Browser File Browser ROM Flashing Installing to Memory Card (via FreePSXBoot) Restoring original EEPROMS PC-Side serial tools Hex Editor Hidden Button Combos","title":"Features / Help Topics:"},{"location":"#troubleshooting","text":"Help, it's not booting my game!","title":"Troubleshooting"},{"location":"#_2","text":"My game is super jerky!","title":""},{"location":"#_3","text":"My laser is kinda noisy, doesn't sound healthy! Make sure you grab a good redump copy of the disc (not some crappy ECM'd rip from a random site) Try another burner (some discs prefer some burners) Burn it at low speed Use good quality discs. \"Verbatim\" is generally good. Try on another machine Is the disc clean? But like... did you really check? Still not booting! Okay, at a minimum I need to know: How are you booting the machine (cheat cart, boot CD, freePSXBoot etc) What model is the machine? What game? What region is the game from? What burner did you use? Is the disc clean? What brand of disc did you use? Does your PC read the disc? Is the machine modded? Is the laser making any noises? Don't forget the info above!","title":""},{"location":"#thanks","text":"Big thanks to Nicolas Noble for putting together this mkdocs template + build scripts!","title":"Thanks"},{"location":"#developers","text":"If you're interested in PSX development in general, drop by the psx.dev discord at http://PSX.dev","title":"Developers"},{"location":"advanced/","text":"Hidden Button Combos R1 to boot the cart Square to toggle fast/slow serial comms. (115200 vs 518400) L1 + Square to enable Debug Mode Placeholder. PC-Side serial tools The serial tool to connect to PC is called NOTPSXSerial, or \"nops\" for short. nops (aka \"NotPSXSerial\"). It's included with the boot disc by default. You'll need a standard USB to UART dongle. They're like 4 dollars on Amazon. It's included with the boot disc by default. Works fine on Mac and Linux using mono. Can I use the parallel port? Nah, unlikely. It's clunky, awkward, most carts need a voltage level adapter and it's 2021. Supported functions: Upload + Run an .exe Upload arbitrary binaries Flash .ROM files to your carts Write memcards (including FreePSXBoot FreePSXBoot ) Dump memcards Dump RAM Watch RAM Poke RAM Read, Write, Access Breakpoints Call/Jump to addresses Enter/Exit kernel debug mode This is not an exhaustive list. See the nops docu for more info. Hex Editor L1 / R1 = back and forward 1 page L1 / R1 + Triangle = back and forward a bit further L1 / R1 + Square = back and forward even further R2 = cycle beteween RAM, EEPROM, BIOS, etc X = edit byte L2 = Enter an address manually (hint: get somewhere close via R2 first to save time) Start / Sel = Execute the code starting at the cursor Circle = Exit","title":"Advanced"},{"location":"advanced/#hidden-button-combos","text":"R1 to boot the cart Square to toggle fast/slow serial comms. (115200 vs 518400) L1 + Square to enable Debug Mode Placeholder.","title":"Hidden Button Combos"},{"location":"advanced/#pc-side-serial-tools","text":"The serial tool to connect to PC is called NOTPSXSerial, or \"nops\" for short. nops (aka \"NotPSXSerial\"). It's included with the boot disc by default. You'll need a standard USB to UART dongle. They're like 4 dollars on Amazon. It's included with the boot disc by default. Works fine on Mac and Linux using mono. Can I use the parallel port? Nah, unlikely. It's clunky, awkward, most carts need a voltage level adapter and it's 2021.","title":"PC-Side serial tools"},{"location":"advanced/#supported-functions","text":"Upload + Run an .exe Upload arbitrary binaries Flash .ROM files to your carts Write memcards (including FreePSXBoot FreePSXBoot ) Dump memcards Dump RAM Watch RAM Poke RAM Read, Write, Access Breakpoints Call/Jump to addresses Enter/Exit kernel debug mode This is not an exhaustive list. See the nops docu for more info.","title":"Supported functions:"},{"location":"advanced/#hex-editor","text":"L1 / R1 = back and forward 1 page L1 / R1 + Triangle = back and forward a bit further L1 / R1 + Square = back and forward even further R2 = cycle beteween RAM, EEPROM, BIOS, etc X = edit byte L2 = Enter an address manually (hint: get somewhere close via R2 first to save time) Start / Sel = Execute the code starting at the cursor Circle = Exit","title":"Hex Editor"},{"location":"debug_gdb/","text":"Debugging with GDB Thanks to the hard work of Skitchin on http://psx.dev Discord , nops can act as a bridge between GDB and the PSX. You are able to step through and debug commerical games, or your own code in the GDB or VSCode. GDB connects to nops via sockets. Nops connects to the PSX/Unirom via serial cable. Note: This is still an beta in-development feature, so be sure to swing by the Discord and let us know how you got on, or hurl some abuse at @Skitchin. Installation Other than, the nops/uni, you'll need a copy of gdb for your platform: Windows: Easiest to use Nicolas Noble's prebuilt windows GDB (mips) binaries: https://static.grumpycoder.net/pixel/gdb-multiarch-windows/ Remember to add e.g. c:\\gdb-multiarch\\bin to your %PATH% viable! Linux/Mac: Apt-get, brew, etc. Example flow Let's pretend we're developing a Hello World example, we'll be using a modern version of GCC. The following projects are suitable for building/testing/tweaking your own code. They all include docker images, so you can use Docker and run dockerrun.bat/dockerrun.sh, dockershell.bat/dockershell.sh, etc or your own GCC setup. PCSX Redux's 'nugget' tool chain, there's loads of example code: https://github.com/grumpycoders/pcsx-redux/tree/main/src/mips A basic bare-ish metal demo with pads/gpu etc using the same toolchain: https://github.com/JonathanDotCel/helloworld_and_flappycredits 1: Build your thing Build your source and you'll generate an .elf and .exe file. The .elf is more suitable for debugging, though if your setup doesn't provide that, don't worry - you just won't have access to all of the symbols, line numbers, etc. 2: Launch nops Launch nops, and tell it to listen for GDB on a specific port.: Something like this depending on your OS, speed, port, etc... nops /fast /gdb 127.0.0.1:3333 COM14 /m nops /gdb 127.0.0.1:8888 /dev/tty.SLAB_USBtoUART Note: Nops will handle putting unirom into /debug mode so you don't have to. 3: Launch GDB and Upload (commandline version) Might be worth getting the hang of the basics before using the VSCode version: A: In the terminal: gdb ./helloworld.elf B: (In GDB) Tell GDB where to find nops target remote locahost:3333 C: Load it and transfer to the PSX: load (or load helloworld.elf if you forgot the filename in the first command) The psx is now in a halted state with the program ready to run, but you can issue some commands before it starts. tbreak main for example will set a temporary breakpoint at your program's \"main()\" D: Done, run it! continue Further examples: Ex: If you had a temporary breakpoint set, chances are it will immediately break on that. You could then do (for example) layout asm layout source Ex: If you wanted to change the value at a particular address: set {int}0x80010000 = 0 Ex: to check register values: info regs Ex: to check a value: print main Ex: to step to the next instruction: stepi And of course, to resume: continue Once again cheers to Skitchin for his hard work on this feature! For a full list of available GDB commands: http://davis.lbl.gov/Manuals/GDB/gdb_34.html#SEC636 3: Launch GDB and Upload (via VSCode) Create/modify the following vscode launch.json and put it here relative to your binary: .../yourproject/helloworld.elf <-- binary here .../yourproject/.vscode/launchjson <-- launch.json here { \"version\": \"0.2.0\", \"configurations\": [ { \"type\": \"gdb\", \"request\": \"launch\", \"name\": \"(gdb) Launch My Hello World\", \"target\": \"./helloworld.elf\", \"gdbpath\": \"/usr/bin/gdb-multiarch\", \"windows\": { \"gdbpath\": \"C:/gdb-multiarch/bin/gdb.exe\", }, \"cwd\": \"${workspaceRoot}\", \"autorun\": [ \"target remote localhost:3333\", \"symbol-file ./helloworld.elf\", \"set substitute-path /project .\", \"load ./helloworld.elf\", // this line for pcsx-redux only! \"monitor reset halt\", \"tbreak main\", \"continue\", ], \"valuesFormatting\": \"parseText\", } ] }","title":"Debugging with GDB"},{"location":"debug_gdb/#debugging-with-gdb","text":"Thanks to the hard work of Skitchin on http://psx.dev Discord , nops can act as a bridge between GDB and the PSX. You are able to step through and debug commerical games, or your own code in the GDB or VSCode. GDB connects to nops via sockets. Nops connects to the PSX/Unirom via serial cable.","title":"Debugging with GDB"},{"location":"debug_gdb/#note","text":"This is still an beta in-development feature, so be sure to swing by the Discord and let us know how you got on, or hurl some abuse at @Skitchin.","title":"Note:"},{"location":"debug_gdb/#installation","text":"Other than, the nops/uni, you'll need a copy of gdb for your platform:","title":"Installation"},{"location":"debug_gdb/#windows","text":"Easiest to use Nicolas Noble's prebuilt windows GDB (mips) binaries: https://static.grumpycoder.net/pixel/gdb-multiarch-windows/ Remember to add e.g. c:\\gdb-multiarch\\bin to your %PATH% viable!","title":"Windows:"},{"location":"debug_gdb/#linuxmac","text":"Apt-get, brew, etc.","title":"Linux/Mac:"},{"location":"debug_gdb/#example-flow","text":"Let's pretend we're developing a Hello World example, we'll be using a modern version of GCC. The following projects are suitable for building/testing/tweaking your own code. They all include docker images, so you can use Docker and run dockerrun.bat/dockerrun.sh, dockershell.bat/dockershell.sh, etc or your own GCC setup. PCSX Redux's 'nugget' tool chain, there's loads of example code: https://github.com/grumpycoders/pcsx-redux/tree/main/src/mips A basic bare-ish metal demo with pads/gpu etc using the same toolchain: https://github.com/JonathanDotCel/helloworld_and_flappycredits","title":"Example flow"},{"location":"debug_gdb/#1-build-your-thing","text":"Build your source and you'll generate an .elf and .exe file. The .elf is more suitable for debugging, though if your setup doesn't provide that, don't worry - you just won't have access to all of the symbols, line numbers, etc.","title":"1: Build your thing"},{"location":"debug_gdb/#2-launch-nops","text":"Launch nops, and tell it to listen for GDB on a specific port.: Something like this depending on your OS, speed, port, etc... nops /fast /gdb 127.0.0.1:3333 COM14 /m nops /gdb 127.0.0.1:8888 /dev/tty.SLAB_USBtoUART Note: Nops will handle putting unirom into /debug mode so you don't have to.","title":"2: Launch nops"},{"location":"debug_gdb/#3-launch-gdb-and-upload-commandline-version","text":"Might be worth getting the hang of the basics before using the VSCode version: A: In the terminal: gdb ./helloworld.elf B: (In GDB) Tell GDB where to find nops target remote locahost:3333 C: Load it and transfer to the PSX: load (or load helloworld.elf if you forgot the filename in the first command) The psx is now in a halted state with the program ready to run, but you can issue some commands before it starts. tbreak main for example will set a temporary breakpoint at your program's \"main()\" D: Done, run it! continue","title":"3: Launch GDB and Upload (commandline version)"},{"location":"debug_gdb/#further-examples","text":"Ex: If you had a temporary breakpoint set, chances are it will immediately break on that. You could then do (for example) layout asm layout source Ex: If you wanted to change the value at a particular address: set {int}0x80010000 = 0 Ex: to check register values: info regs Ex: to check a value: print main Ex: to step to the next instruction: stepi And of course, to resume: continue Once again cheers to Skitchin for his hard work on this feature! For a full list of available GDB commands: http://davis.lbl.gov/Manuals/GDB/gdb_34.html#SEC636","title":"Further examples:"},{"location":"debug_gdb/#3-launch-gdb-and-upload-via-vscode","text":"Create/modify the following vscode launch.json and put it here relative to your binary: .../yourproject/helloworld.elf <-- binary here .../yourproject/.vscode/launchjson <-- launch.json here { \"version\": \"0.2.0\", \"configurations\": [ { \"type\": \"gdb\", \"request\": \"launch\", \"name\": \"(gdb) Launch My Hello World\", \"target\": \"./helloworld.elf\", \"gdbpath\": \"/usr/bin/gdb-multiarch\", \"windows\": { \"gdbpath\": \"C:/gdb-multiarch/bin/gdb.exe\", }, \"cwd\": \"${workspaceRoot}\", \"autorun\": [ \"target remote localhost:3333\", \"symbol-file ./helloworld.elf\", \"set substitute-path /project .\", \"load ./helloworld.elf\", // this line for pcsx-redux only! \"monitor reset halt\", \"tbreak main\", \"continue\", ], \"valuesFormatting\": \"parseText\", } ] }","title":"3: Launch GDB and Upload (via VSCode)"},{"location":"debug_nops/","text":"Debugging with NOPS Note: Nops features some barebones, basic commandline debugging functionality. While these features are useful and stable, it might be worth your time to see the Debugging with GDB page instead, which offers multiple breakpoints, stepping through soruce, monitoring variables, etc. Debug mode basics. When Unirom is put into debug mode, it installs a copy of the serial routines into kernel memory meaning that you can continue to issue serial commands with nops, even after launching games/homebrew etc. As you can imagine, this is incredibly useful for developement as it lets you write your running .exe over itsself over and over. Most of the regular nops command set is supported, with the exception of e.g. rom flashing. How debug mode? You can enter debug mode via L1 + Square or running nops /debug This will copy the SIO handler to kernel memory as mentioned. From here you can boot games, etc. See also: nops' own documentation: NOTPSXSerial (aka \"nops\"). The 'Halt State' The halt state is your basic debugging break. There are 3 ways to enter the halt state: 1: Via the commandline: Running nops /halt will trigger an interrupt. 2: A game crashed Like /halt, this will trigger an exception. 3: You set a breakpoint You've set a read/write/execute breakpoint, and that's been triggered. In all 3 cases, the kernel debug mode sio handler (which now sits in the kernel) will catch the event and hold the PSX in a tight loop, waiting for instructions. To exit the halt state, issue: nops /cont If your software has legitimately crashed, it might not recover, but if you triggered the halt state via /halt , or a hook, it will be fine. Note: With kernel debug installed, the machine is put into a temporary halt state while you do stuff like upload or download binaries. However: If you intend to upload or download several binaries for example, you might want to manually run nops /halt first, then undo that after so that your game doesn't try to execute between uploads/downloads. Note: With kernel debug installed, you won't see the normal unirom guru meditation screen when something goes wrong. if you've run nops with the /m (monitor) command though, it will say something along the lines of \"PSX has crashed\" and offer you a look at the saved registers. Registers: This shows the registers the instant the PSX entered the halt state: nops /regs Changing a register's value: nops /setreg v0 0x1F801800 This example will reboot the psx when you run nops /cont by moving the PC: nops /setreg pc 0xBFC00000 Note that /setreg will only work in the halt state! Hooks: Hooks trigger the halt state on read, write or execution of a specific address. nops /hookread 0xADDR nops /hookwrite 0xADDR nops /hookex 0xADDR These use the coprocessor hooking mechanism, so if you're after something a little more in-depth, remember to check out Debugging with GDB Debug Command Examples As you should already know (because you've been reading every word super carefully, right?) start with: nops /debug or L1 + Square An int-driven SIO handler has now been installed into the kernel, and can talk to nops once you start a game, etc. The command set is basically the same as for regular SIO. Example: Breakpoint on a particular location Yo can do these two in whatever order: nops /debug nops /bin 0x80030000 something.bin Now apply the hook nops /hookex 0x80031234 And execute the binary nops /jal 0x80030000 /m When your program runs from 0x80030000 to 0x80031234, nops will say something to the effect or \"The psx has halted...\". Hint! Don't forget the /m This will put nops into monitor mode . Monitor mode will detect when the system has halted, and offer a debug menu. From here you can dump ram, change registers, etc. Example: Memory breakpoint on an exe Again, you have some flexibility here - but you'd best enter debug mode before uploading the .exe! nops /debug nops /hookread 0x80041234 nops /exe myfile.exe or if you want to go a bit faster: nops /fast /debug nops /fast /hookread 0x80041234 nops /fast /exe myfile.exe A reminder on /fast /slow You've specified /fast . Next time you start nops, it has no way of knowing if the ps is in fast mode or not. So remember to use /fast on every command... or not at all! You can switch back and forth in most cases with the following (If you're sick of typing it). nops /fast nops /slow Tapping Square from in unirom","title":"Debugging with NOPS"},{"location":"debug_nops/#debugging-with-nops","text":"","title":"Debugging with NOPS"},{"location":"debug_nops/#note","text":"Nops features some barebones, basic commandline debugging functionality. While these features are useful and stable, it might be worth your time to see the Debugging with GDB page instead, which offers multiple breakpoints, stepping through soruce, monitoring variables, etc.","title":"Note:"},{"location":"debug_nops/#debug-mode-basics","text":"When Unirom is put into debug mode, it installs a copy of the serial routines into kernel memory meaning that you can continue to issue serial commands with nops, even after launching games/homebrew etc. As you can imagine, this is incredibly useful for developement as it lets you write your running .exe over itsself over and over. Most of the regular nops command set is supported, with the exception of e.g. rom flashing.","title":"Debug mode basics."},{"location":"debug_nops/#how-debug-mode","text":"You can enter debug mode via L1 + Square or running nops /debug This will copy the SIO handler to kernel memory as mentioned. From here you can boot games, etc.","title":"How debug mode?"},{"location":"debug_nops/#see-also","text":"nops' own documentation: NOTPSXSerial (aka \"nops\").","title":"See also:"},{"location":"debug_nops/#the-halt-state","text":"The halt state is your basic debugging break. There are 3 ways to enter the halt state:","title":"The 'Halt State'"},{"location":"debug_nops/#1-via-the-commandline","text":"Running nops /halt will trigger an interrupt.","title":"1: Via the commandline:"},{"location":"debug_nops/#2-a-game-crashed","text":"Like /halt, this will trigger an exception.","title":"2: A game crashed"},{"location":"debug_nops/#3-you-set-a-breakpoint","text":"You've set a read/write/execute breakpoint, and that's been triggered. In all 3 cases, the kernel debug mode sio handler (which now sits in the kernel) will catch the event and hold the PSX in a tight loop, waiting for instructions. To exit the halt state, issue: nops /cont If your software has legitimately crashed, it might not recover, but if you triggered the halt state via /halt , or a hook, it will be fine.","title":"3: You set a breakpoint"},{"location":"debug_nops/#note_1","text":"With kernel debug installed, the machine is put into a temporary halt state while you do stuff like upload or download binaries. However: If you intend to upload or download several binaries for example, you might want to manually run nops /halt first, then undo that after so that your game doesn't try to execute between uploads/downloads.","title":"Note:"},{"location":"debug_nops/#note_2","text":"With kernel debug installed, you won't see the normal unirom guru meditation screen when something goes wrong. if you've run nops with the /m (monitor) command though, it will say something along the lines of \"PSX has crashed\" and offer you a look at the saved registers.","title":"Note:"},{"location":"debug_nops/#registers","text":"","title":"Registers:"},{"location":"debug_nops/#this-shows-the-registers-the-instant-the-psx-entered-the-halt-state","text":"nops /regs","title":"This shows the registers the instant the PSX entered the halt state:"},{"location":"debug_nops/#changing-a-registers-value","text":"nops /setreg v0 0x1F801800","title":"Changing a register's value:"},{"location":"debug_nops/#this-example-will-reboot-the-psx-when-you-run-nops-cont-by-moving-the-pc","text":"nops /setreg pc 0xBFC00000 Note that /setreg will only work in the halt state!","title":"This example will reboot the psx when you run nops /cont by moving the PC:"},{"location":"debug_nops/#hooks","text":"Hooks trigger the halt state on read, write or execution of a specific address. nops /hookread 0xADDR nops /hookwrite 0xADDR nops /hookex 0xADDR These use the coprocessor hooking mechanism, so if you're after something a little more in-depth, remember to check out Debugging with GDB","title":"Hooks:"},{"location":"debug_nops/#debug-command-examples","text":"As you should already know (because you've been reading every word super carefully, right?) start with: nops /debug or L1 + Square An int-driven SIO handler has now been installed into the kernel, and can talk to nops once you start a game, etc. The command set is basically the same as for regular SIO.","title":"Debug Command Examples"},{"location":"debug_nops/#example-breakpoint-on-a-particular-location","text":"Yo can do these two in whatever order: nops /debug nops /bin 0x80030000 something.bin Now apply the hook nops /hookex 0x80031234 And execute the binary nops /jal 0x80030000 /m When your program runs from 0x80030000 to 0x80031234, nops will say something to the effect or \"The psx has halted...\".","title":"Example: Breakpoint on a particular location"},{"location":"debug_nops/#hint","text":"Don't forget the /m This will put nops into monitor mode . Monitor mode will detect when the system has halted, and offer a debug menu. From here you can dump ram, change registers, etc.","title":"Hint!"},{"location":"debug_nops/#example-memory-breakpoint-on-an-exe","text":"Again, you have some flexibility here - but you'd best enter debug mode before uploading the .exe! nops /debug nops /hookread 0x80041234 nops /exe myfile.exe or if you want to go a bit faster: nops /fast /debug nops /fast /hookread 0x80041234 nops /fast /exe myfile.exe","title":"Example: Memory breakpoint on an exe"},{"location":"debug_nops/#a-reminder-on-fast-slow","text":"You've specified /fast . Next time you start nops, it has no way of knowing if the ps is in fast mode or not. So remember to use /fast on every command... or not at all! You can switch back and forth in most cases with the following (If you're sick of typing it). nops /fast nops /slow Tapping Square from in unirom","title":"A reminder on /fast /slow"},{"location":"installation/","text":"Q: How do I install unirom? A: Via Unirom! Boot up the boot disc and it'll let you copy itsself to your cheat cart or memory card. Without Mod Chip Download the bootdisc from the unirom release page Burn to CD using ImgBurn. Use the best CDRs you can find. A name brand like Verbatim tends to work no problem. Use the lowest speed your writer supports. Don't stare at the fucking laser Boot using the swap trick Don't stare at the fucking laser Go to \"Install\" on the main page Seriously, don't look at the fucking laser though. More info on flashing to cheat carts: More info on flashing to mem cards: Using another cheat cart There's a good chance your existing cheat cart can make the above swap easier: Jam down the lid sensor on your PSX Put an original/black disc in Turn the machine on, and go to the file viewer, let it happen Back out of the menu The drive is now unlocked Don't look at the fucking laser Put the burned disc in the drive Don't look at the fucking laser Start the \"game\" More info on flashing to cheat carts: More info on flashing to mem cards: Modded PS2 or PS3 Grab the FreePSXBoot+Unirom images from: FreePSXBoot ) Write them to a memory card. Profit? With Mod Chip, xStation, etc Just burn the CD and boot it: Download page Is my cheat cart supported? Probably yes More info on flashing to cheat carts: More info on flashing to mem cards: Supported Cheat Carts: Almost all of them, even DIY franken carts. It's only the jankiest of jank knockoffs that might not. And most jank knockoffs are fine. Tested working: All Xplorer (V1, V2, V3, Pro, FX) All Datel (V1, V2, V3): Action Replay, Equalizer, GameShark, etc. Randos: Password Cart, Game Enhancer, Smart Cartridge, Gamars, EMS, Game Buster, etc Supported EEPROMs I think most if not all of the common 28 pin JEDEC varieties at this point. Some carts cheaped out and used a ROM or a chip that was impossible to reprogram with the PS1's power supply. In those cases, replace it? Rom Flashing To install to a cheat cart, the installer will write over the existing ROM. You'll need the bootdisc in the drive for it to find the files. All cheat carts are at least 128k. This will fit unirom standalone. Some cheat carts have 256k or higher. These will allow you to dual boot unirom & caetla. The installer will attempt to auto-detect your cart type and size. If you've frankensteined a cart together, or have an unsupported chip, you can try to use the 'manual' setup option, and tell it roughly what to try. Every EEPROM I've encountered in the wild is currently supported. It won't flash! Try unirom_standalone Definitely start by updating to the latest version! Go to the status screen and see if it has any sort of valid ID or name for your card Try forcing manual mode, 128k/256k from the manual cart detector I wanna make a backup! You can back it up via nops if you care. Or you can restore most carts from the boot disc: Restoring ROMS Is my cheat cart supported? Probably yes Installing via FreePSXBoot FreePSXBoot is the exploit (like FreeMCBoot for PS2) which allows you to boot unirom from the memory card. Unirom will automatically detect your playstation bios version and install the appropriate card image of the same version. Many thanks to all of the FreePSXBoot contributers for their work on this! The FreePSXBoot Project page can be found here: FreePSXBoot on GitHub ) If it's not working, please visit the above link and look for any special notes on your particular playstation model. Then what? Start the PSX with the lid open (or no disc in). FreePSXBoot card in the left slot (Some playstations require any other card in the 2nd slot) Open the memcard manager You should get a progress bar... Unirom will load a few seconds later. Game crashes when I load it? Take the exploit card out before booting the game. Nothing's happening Right card? Right slot? Did you check out the advice on the FreePSXBoot GitHub page )? \"Verify Failed\" when installing Some cheap memory cards would not contain as much memory as they'd claim, or were just a bit slow/useless all round. Genuine, or good quality memory cards will be fine. Can I use a Memory Card Pro? Yes! Restoring ROMS You can restore most carts to their factory settings via this collection of ROMs on the boot disc. Access it via the Install menu. The same general rules as Rom Flashing apply here. If you have an XFlash CD, you can also use the XFlash option to read the data from one of those. Many thanks to Squaresoft74 and kHn for maintaining this collection! Also thanks to Shendo for allowing us to use PS1CardLink ! Which rom file is which? unirom_standalone.rom The standalone version of the rom. It's under 128k and fits on any old cart. unirom_withcaetla.rom For 256k carts or bigger. (The installer will let you know) If your cart has enough space, you can install unirom and caetla side by side. unirom_datelv2_withcaetla.rom The V2 versions of datel carts (not V1, not V3, etc, lol) have a weird memory map with a big gap in the middle. If you want to dualboot unirom + caetla, you'll need this. If you don't want caetla, you could use the unirom_standalone.rom Note: unirom will hijack the initial switch state.","title":"Installation"},{"location":"installation/#_1","text":"A: Via Unirom! Boot up the boot disc and it'll let you copy itsself to your cheat cart or memory card.","title":""},{"location":"installation/#without-mod-chip","text":"Download the bootdisc from the unirom release page Burn to CD using ImgBurn. Use the best CDRs you can find. A name brand like Verbatim tends to work no problem. Use the lowest speed your writer supports. Don't stare at the fucking laser Boot using the swap trick Don't stare at the fucking laser Go to \"Install\" on the main page Seriously, don't look at the fucking laser though. More info on flashing to cheat carts: More info on flashing to mem cards:","title":"Without Mod Chip"},{"location":"installation/#using-another-cheat-cart","text":"There's a good chance your existing cheat cart can make the above swap easier: Jam down the lid sensor on your PSX Put an original/black disc in Turn the machine on, and go to the file viewer, let it happen Back out of the menu The drive is now unlocked Don't look at the fucking laser Put the burned disc in the drive Don't look at the fucking laser Start the \"game\" More info on flashing to cheat carts: More info on flashing to mem cards:","title":"Using another cheat cart"},{"location":"installation/#modded-ps2-or-ps3","text":"Grab the FreePSXBoot+Unirom images from: FreePSXBoot ) Write them to a memory card. Profit?","title":"Modded PS2 or PS3"},{"location":"installation/#with-mod-chip-xstation-etc","text":"Just burn the CD and boot it: Download page Is my cheat cart supported? Probably yes More info on flashing to cheat carts: More info on flashing to mem cards:","title":"With Mod Chip, xStation, etc"},{"location":"installation/#supported-cheat-carts","text":"Almost all of them, even DIY franken carts. It's only the jankiest of jank knockoffs that might not. And most jank knockoffs are fine.","title":"Supported Cheat Carts:"},{"location":"installation/#tested-working","text":"All Xplorer (V1, V2, V3, Pro, FX) All Datel (V1, V2, V3): Action Replay, Equalizer, GameShark, etc. Randos: Password Cart, Game Enhancer, Smart Cartridge, Gamars, EMS, Game Buster, etc","title":"Tested working:"},{"location":"installation/#supported-eeproms","text":"I think most if not all of the common 28 pin JEDEC varieties at this point. Some carts cheaped out and used a ROM or a chip that was impossible to reprogram with the PS1's power supply. In those cases, replace it?","title":"Supported EEPROMs"},{"location":"installation/#rom-flashing","text":"To install to a cheat cart, the installer will write over the existing ROM. You'll need the bootdisc in the drive for it to find the files. All cheat carts are at least 128k. This will fit unirom standalone. Some cheat carts have 256k or higher. These will allow you to dual boot unirom & caetla. The installer will attempt to auto-detect your cart type and size. If you've frankensteined a cart together, or have an unsupported chip, you can try to use the 'manual' setup option, and tell it roughly what to try. Every EEPROM I've encountered in the wild is currently supported. It won't flash! Try unirom_standalone Definitely start by updating to the latest version! Go to the status screen and see if it has any sort of valid ID or name for your card Try forcing manual mode, 128k/256k from the manual cart detector I wanna make a backup! You can back it up via nops if you care. Or you can restore most carts from the boot disc: Restoring ROMS Is my cheat cart supported?","title":"Rom Flashing"},{"location":"installation/#_2","text":"Probably yes","title":""},{"location":"installation/#installing-via-freepsxboot","text":"FreePSXBoot is the exploit (like FreeMCBoot for PS2) which allows you to boot unirom from the memory card. Unirom will automatically detect your playstation bios version and install the appropriate card image of the same version. Many thanks to all of the FreePSXBoot contributers for their work on this! The FreePSXBoot Project page can be found here: FreePSXBoot on GitHub ) If it's not working, please visit the above link and look for any special notes on your particular playstation model. Then what? Start the PSX with the lid open (or no disc in). FreePSXBoot card in the left slot (Some playstations require any other card in the 2nd slot) Open the memcard manager You should get a progress bar... Unirom will load a few seconds later. Game crashes when I load it? Take the exploit card out before booting the game. Nothing's happening Right card? Right slot? Did you check out the advice on the FreePSXBoot GitHub page )? \"Verify Failed\" when installing Some cheap memory cards would not contain as much memory as they'd claim, or were just a bit slow/useless all round. Genuine, or good quality memory cards will be fine. Can I use a Memory Card Pro? Yes!","title":"Installing via FreePSXBoot"},{"location":"installation/#restoring-roms","text":"You can restore most carts to their factory settings via this collection of ROMs on the boot disc. Access it via the Install menu. The same general rules as Rom Flashing apply here. If you have an XFlash CD, you can also use the XFlash option to read the data from one of those. Many thanks to Squaresoft74 and kHn for maintaining this collection! Also thanks to Shendo for allowing us to use PS1CardLink !","title":"Restoring ROMS"},{"location":"installation/#which-rom-file-is-which","text":"","title":"Which rom file is which?"},{"location":"installation/#unirom_standalonerom","text":"The standalone version of the rom. It's under 128k and fits on any old cart.","title":"unirom_standalone.rom"},{"location":"installation/#unirom_withcaetlarom","text":"For 256k carts or bigger. (The installer will let you know) If your cart has enough space, you can install unirom and caetla side by side.","title":"unirom_withcaetla.rom"},{"location":"installation/#unirom_datelv2_withcaetlarom","text":"The V2 versions of datel carts (not V1, not V3, etc, lol) have a weird memory map with a big gap in the middle. If you want to dualboot unirom + caetla, you'll need this. If you don't want caetla, you could use the unirom_standalone.rom Note: unirom will hijack the initial switch state.","title":"unirom_datelv2_withcaetla.rom"},{"location":"serial_psx_cable/","text":"USB to Serial PSX cable This cable connects a PSX to a computer. You can then interact with the following to upload/download binary data, peek/poke, hook r/w/x, launch executables, etc... Unirom booted from a cheat cart Unirom booted from a memory card Unirom booted from a CD Suitable USB/Serial adapters : An FTDI FT232RL module OR An Arduino Uno that supports 3.3V serial OR A Raspberry Pi 0,1,2,3,4 OR A Raspberry Pi Pico OR A CP2102 or CP2104 If you have this stuff lying around, this can help : A PSX SCPH-1040 serial cable, or half a cable A dead PSX motherboard that has a serial port, or just the SIO socket Dupont wires Connection You only need 3 wires from the PSX : Tx, Rx and Gnd. PSX pins | FTDI pins 2 | GND 8 | TX 5 | RX Which controller can be used FTDI FT232RL Connect PSX SIO pins 2, 5, 8 to the FTDI's Tx, Rx and Gnd. Done. 3.3V Arduino Uno Some arduino unos have a jumper to use 3.3V instead of 5V levels. You can use such a board with an additional resistor, like so : Sources : http://www.psxdev.net/forum/viewtopic.php?f=47&t=760&p=19081 Raspberry Pi Either over your local network or via a direct lan cable setup, you can use a rpi if you have one lying around. Plug the PSX's serial output Rx/TX/Gnd to the GPIO14/pin 8 (Tx), GPIO15/pin 10 (Rx) and pin 6 (Gnd). See here for the full solution : http://wiki.arthus.net/?psxdev-rpi_serial_over_network Raspberry Pi Pico The new controller by Rpi foundation can be used to with the Pico-uart-bridge firmware : https://github.com/Noltari/pico-uart-bridge/releases Use GPO 0/Pin 1 as Tx, GPO 1/Pin 2 as Rx and GPO 3/Pin 3 as Gnd : CP2102 / CP2104 The CP2102 and CP2104 are reported to work at least in /slow mode (115200 bauds). Others : CH341 is reported to work in /slow mode (115200 bauds) From the PSX to the controller Method #1 : Half SCPH-1040 cable Hack the cable, connect things and voila : Sources : http://www.psxdev.net/forum/viewtopic.php?f=62&t=349#p2592 http://www.psxdev.net/forum/viewtopic.php?t=497#p3556 Method #2 : Salvaged PSX serial port + full SCPH-1040 cable Use a salvaged PSX SIO port from a dead motherboard, and use your precious serial cable without destroying anything : Source : http://www.psxdev.net/forum/viewtopic.php?t=744&sid=ff1cc884ceaaa4267404e61e81130320#p6524 Method #3 : Dead or spare PSX motherboard + full SCPH-1040 cable Same as above except you don't even have to hack the SIO port off the motherboard, just solder your wires directly underneath the SIO port. Sources : https://thp.io/2020/psxserial.html Sources PSX Serial port pinout : https://www.problemkaputt.de/psx-spx.htm#pinouts Method #1 : http://www.psxdev.net/forum/viewtopic.php?f=62&t=349#p2592 http://www.psxdev.net/forum/viewtopic.php?t=497#p3556 Method #2 : http://www.psxdev.net/forum/viewtopic.php?t=744&sid=ff1cc884ceaaa4267404e61e81130320#p6524 Method #3 : https://thp.io/2020/psxserial.html M\u00e9thode 4 : http://www.psxdev.net/forum/viewtopic.php?f=47&t=760&p=19081","title":"USB to Serial PSX cable"},{"location":"serial_psx_cable/#usb-to-serial-psx-cable","text":"This cable connects a PSX to a computer. You can then interact with the following to upload/download binary data, peek/poke, hook r/w/x, launch executables, etc... Unirom booted from a cheat cart Unirom booted from a memory card Unirom booted from a CD","title":"USB to Serial PSX cable"},{"location":"serial_psx_cable/#suitable-usbserial-adapters","text":"An FTDI FT232RL module OR An Arduino Uno that supports 3.3V serial OR A Raspberry Pi 0,1,2,3,4 OR A Raspberry Pi Pico OR A CP2102 or CP2104 If you have this stuff lying around, this can help : A PSX SCPH-1040 serial cable, or half a cable A dead PSX motherboard that has a serial port, or just the SIO socket Dupont wires","title":"Suitable USB/Serial adapters :"},{"location":"serial_psx_cable/#connection","text":"You only need 3 wires from the PSX : Tx, Rx and Gnd. PSX pins | FTDI pins 2 | GND 8 | TX 5 | RX","title":"Connection"},{"location":"serial_psx_cable/#which-controller-can-be-used","text":"","title":"Which controller can be used"},{"location":"serial_psx_cable/#ftdi-ft232rl","text":"Connect PSX SIO pins 2, 5, 8 to the FTDI's Tx, Rx and Gnd. Done.","title":"FTDI FT232RL"},{"location":"serial_psx_cable/#33v-arduino-uno","text":"Some arduino unos have a jumper to use 3.3V instead of 5V levels. You can use such a board with an additional resistor, like so : Sources : http://www.psxdev.net/forum/viewtopic.php?f=47&t=760&p=19081","title":"3.3V Arduino Uno"},{"location":"serial_psx_cable/#raspberry-pi","text":"Either over your local network or via a direct lan cable setup, you can use a rpi if you have one lying around. Plug the PSX's serial output Rx/TX/Gnd to the GPIO14/pin 8 (Tx), GPIO15/pin 10 (Rx) and pin 6 (Gnd). See here for the full solution : http://wiki.arthus.net/?psxdev-rpi_serial_over_network","title":"Raspberry Pi"},{"location":"serial_psx_cable/#raspberry-pi-pico","text":"The new controller by Rpi foundation can be used to with the Pico-uart-bridge firmware : https://github.com/Noltari/pico-uart-bridge/releases Use GPO 0/Pin 1 as Tx, GPO 1/Pin 2 as Rx and GPO 3/Pin 3 as Gnd :","title":"Raspberry Pi Pico"},{"location":"serial_psx_cable/#cp2102-cp2104","text":"The CP2102 and CP2104 are reported to work at least in /slow mode (115200 bauds).","title":"CP2102 / CP2104"},{"location":"serial_psx_cable/#others","text":"CH341 is reported to work in /slow mode (115200 bauds)","title":"Others :"},{"location":"serial_psx_cable/#from-the-psx-to-the-controller","text":"","title":"From the PSX to the controller"},{"location":"serial_psx_cable/#method-1-half-scph-1040-cable","text":"Hack the cable, connect things and voila : Sources : http://www.psxdev.net/forum/viewtopic.php?f=62&t=349#p2592 http://www.psxdev.net/forum/viewtopic.php?t=497#p3556","title":"Method #1 : Half SCPH-1040 cable"},{"location":"serial_psx_cable/#method-2-salvaged-psx-serial-port-full-scph-1040-cable","text":"Use a salvaged PSX SIO port from a dead motherboard, and use your precious serial cable without destroying anything : Source : http://www.psxdev.net/forum/viewtopic.php?t=744&sid=ff1cc884ceaaa4267404e61e81130320#p6524","title":"Method #2 : Salvaged PSX serial port + full SCPH-1040 cable"},{"location":"serial_psx_cable/#method-3-dead-or-spare-psx-motherboard-full-scph-1040-cable","text":"Same as above except you don't even have to hack the SIO port off the motherboard, just solder your wires directly underneath the SIO port. Sources : https://thp.io/2020/psxserial.html","title":"Method #3 : Dead or spare PSX motherboard + full SCPH-1040 cable"},{"location":"serial_psx_cable/#sources","text":"PSX Serial port pinout : https://www.problemkaputt.de/psx-spx.htm#pinouts Method #1 : http://www.psxdev.net/forum/viewtopic.php?f=62&t=349#p2592 http://www.psxdev.net/forum/viewtopic.php?t=497#p3556 Method #2 : http://www.psxdev.net/forum/viewtopic.php?t=744&sid=ff1cc884ceaaa4267404e61e81130320#p6524 Method #3 : https://thp.io/2020/psxserial.html M\u00e9thode 4 : http://www.psxdev.net/forum/viewtopic.php?f=47&t=760&p=19081","title":"Sources"},{"location":"usage/","text":"Mod-free booting Once unirom has booted (from memcard or via flash cart), it will unlock the drive via nocash unlock* meaning you can play imports and stuff without needing to swap discs. Except on Japanese units. For those you can use a modchip, xStation, etc or just stop the disc as described below: boot with a black disc in go to the boot menu and hit \"stop disc\" swap discs don't look at the fucking laser ( it'll be deactivated, but incase it isn't for whatever reason, don't fucking look at it) put your other disc in and boot as normal. It's not working! Someone's probably solved it: Troubleshooting note*: some nicolases don't like the term \"nocash unlock\" PAL/NTSC switch / region override Allows you to force the video mode of a game to PAL or NTSC. PAL->NTSC will be the slightly higher PAL resolution with the slightly higher NTSC framerate. NTSC-PAL will be the slightly lower NTSC resolution with the slightly lower PAL framerate. There's a clear winner there. Help! It's black and white! Some hardware just can't handle the slightly off-spec video output from one machine doing the other's output. You can use a better scaler, DFO mod, etc or just enjoy it like an old black n white movie. Note: This feature is unlikely to work with homebrew that doesn't use the official PSYQ SDK. File Browser The file browser lets you poke around for files on the CD. Valid file types are detected by their headers. ROMS Flash ROMs to cart exactly like any other method. Memcard Images Any valid (raw) memory card dump can be written to mem cards .EXE Load and Exec from CD. Other If the file type is not recognised, unirom will fire up the hex editor. Card Manager The card manager offers a few improvements over the stock manager. It's faster You can undelete files It highlights invalid files You can work with FreePSXBoot cards and format them. You can flick through virtual cards on a Memory Card Pro If you're having trouble with a particular memory card, do let me know, with a photo of the card (preferably with the shell off). Note: not all deleted files can be restored For example if the file was part of a 3-block save, and some parts of the block have been over written.","title":"Usage"},{"location":"usage/#mod-free-booting","text":"Once unirom has booted (from memcard or via flash cart), it will unlock the drive via nocash unlock* meaning you can play imports and stuff without needing to swap discs. Except on Japanese units. For those you can use a modchip, xStation, etc or just stop the disc as described below: boot with a black disc in go to the boot menu and hit \"stop disc\" swap discs don't look at the fucking laser ( it'll be deactivated, but incase it isn't for whatever reason, don't fucking look at it) put your other disc in and boot as normal. It's not working! Someone's probably solved it: Troubleshooting note*: some nicolases don't like the term \"nocash unlock\"","title":"Mod-free booting"},{"location":"usage/#palntsc-switch-region-override","text":"Allows you to force the video mode of a game to PAL or NTSC. PAL->NTSC will be the slightly higher PAL resolution with the slightly higher NTSC framerate. NTSC-PAL will be the slightly lower NTSC resolution with the slightly lower PAL framerate. There's a clear winner there. Help! It's black and white! Some hardware just can't handle the slightly off-spec video output from one machine doing the other's output. You can use a better scaler, DFO mod, etc or just enjoy it like an old black n white movie. Note: This feature is unlikely to work with homebrew that doesn't use the official PSYQ SDK.","title":"PAL/NTSC switch / region override"},{"location":"usage/#file-browser","text":"The file browser lets you poke around for files on the CD. Valid file types are detected by their headers.","title":"File Browser"},{"location":"usage/#roms","text":"Flash ROMs to cart exactly like any other method.","title":"ROMS"},{"location":"usage/#memcard-images","text":"Any valid (raw) memory card dump can be written to mem cards","title":"Memcard Images"},{"location":"usage/#exe","text":"Load and Exec from CD.","title":".EXE"},{"location":"usage/#other","text":"If the file type is not recognised, unirom will fire up the hex editor.","title":"Other"},{"location":"usage/#card-manager","text":"The card manager offers a few improvements over the stock manager. It's faster You can undelete files It highlights invalid files You can work with FreePSXBoot cards and format them. You can flick through virtual cards on a Memory Card Pro If you're having trouble with a particular memory card, do let me know, with a photo of the card (preferably with the shell off).","title":"Card Manager"},{"location":"usage/#note-not-all-deleted-files-can-be-restored","text":"For example if the file was part of a 3-block save, and some parts of the block have been over written.","title":"Note: not all deleted files can be restored"}]}